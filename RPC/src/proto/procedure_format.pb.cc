// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: procedure_format.proto

#include <RPC/procedure_format.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace RPC {
PROTOBUF_CONSTEXPR Argument::Argument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ArgumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArgumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArgumentDefaultTypeInternal() {}
  union {
    Argument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArgumentDefaultTypeInternal _Argument_default_instance_;
PROTOBUF_CONSTEXPR ReturnValue::ReturnValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReturnValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReturnValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReturnValueDefaultTypeInternal() {}
  union {
    ReturnValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReturnValueDefaultTypeInternal _ReturnValue_default_instance_;
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
PROTOBUF_CONSTEXPR FunctionRequest::FunctionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.function_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionRequestDefaultTypeInternal() {}
  union {
    FunctionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionRequestDefaultTypeInternal _FunctionRequest_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR AuthRequest::AuthRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/0
  , /*decltype(_impl_.gid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthRequestDefaultTypeInternal() {}
  union {
    AuthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthRequestDefaultTypeInternal _AuthRequest_default_instance_;
PROTOBUF_CONSTEXPR AuthResponse::AuthResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_expiry_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthResponseDefaultTypeInternal() {}
  union {
    AuthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
}  // namespace RPC
static ::_pb::Metadata file_level_metadata_procedure_5fformat_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_procedure_5fformat_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_procedure_5fformat_2eproto = nullptr;

const uint32_t TableStruct_procedure_5fformat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPC::Argument, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::RPC::Argument, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RPC::Argument, _impl_.name_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::RPC::Argument, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPC::ReturnValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::RPC::ReturnValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RPC::ReturnValue, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::RPC::ReturnValue, _impl_.message_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::RPC::ReturnValue, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPC::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::RPC::Request, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::RPC::Request, _impl_.request_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPC::FunctionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RPC::FunctionRequest, _impl_.function_name_),
  PROTOBUF_FIELD_OFFSET(::RPC::FunctionRequest, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::RPC::FunctionRequest, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::RPC::FunctionRequest, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPC::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::RPC::Response, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::RPC::Response, _impl_.response_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPC::AuthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RPC::AuthRequest, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::RPC::AuthRequest, _impl_.client_secret_),
  PROTOBUF_FIELD_OFFSET(::RPC::AuthRequest, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::RPC::AuthRequest, _impl_.gid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPC::AuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RPC::AuthResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::RPC::AuthResponse, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::RPC::AuthResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::RPC::AuthResponse, _impl_.session_expiry_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RPC::Argument)},
  { 13, -1, -1, sizeof(::RPC::ReturnValue)},
  { 27, -1, -1, sizeof(::RPC::Request)},
  { 36, -1, -1, sizeof(::RPC::FunctionRequest)},
  { 46, -1, -1, sizeof(::RPC::Response)},
  { 55, -1, -1, sizeof(::RPC::AuthRequest)},
  { 65, -1, -1, sizeof(::RPC::AuthResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::RPC::_Argument_default_instance_._instance,
  &::RPC::_ReturnValue_default_instance_._instance,
  &::RPC::_Request_default_instance_._instance,
  &::RPC::_FunctionRequest_default_instance_._instance,
  &::RPC::_Response_default_instance_._instance,
  &::RPC::_AuthRequest_default_instance_._instance,
  &::RPC::_AuthResponse_default_instance_._instance,
};

const char descriptor_table_protodef_procedure_5fformat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026procedure_format.proto\022\003RPC\"\212\001\n\010Argume"
  "nt\022\014\n\004name\030\001 \001(\t\022\021\n\007int_val\030\002 \001(\005H\000\022\024\n\nd"
  "ouble_val\030\003 \001(\001H\000\022\024\n\nstring_val\030\004 \001(\tH\000\022"
  "\024\n\nbinary_val\030\005 \001(\014H\000\022\022\n\010bool_val\030\006 \001(\010H"
  "\000B\007\n\005value\"\275\001\n\013ReturnValue\022\033\n\006status\030\001 \001"
  "(\0162\013.RPC.Status\022\017\n\007message\030\002 \001(\t\022\024\n\nint_"
  "result\030\003 \001(\005H\000\022\027\n\rdouble_result\030\004 \001(\001H\000\022"
  "\027\n\rstring_result\030\005 \001(\tH\000\022\027\n\rbinary_resul"
  "t\030\006 \001(\014H\000\022\025\n\013bool_result\030\007 \001(\010H\000B\010\n\006resu"
  "lt\"u\n\007Request\022(\n\014auth_request\030\001 \001(\0132\020.RP"
  "C.AuthRequestH\000\0220\n\020function_request\030\002 \001("
  "\0132\024.RPC.FunctionRequestH\000B\016\n\014request_typ"
  "e\"g\n\017FunctionRequest\022\025\n\rfunction_name\030\001 "
  "\001(\t\022\033\n\004args\030\002 \003(\0132\r.RPC.Argument\022\021\n\tclie"
  "nt_id\030\003 \001(\005\022\r\n\005token\030\004 \001(\t\"q\n\010Response\022("
  "\n\014return_value\030\001 \001(\0132\020.RPC.ReturnValueH\000"
  "\022*\n\rauth_response\030\002 \001(\0132\021.RPC.AuthRespon"
  "seH\000B\017\n\rresponse_type\"Q\n\013AuthRequest\022\021\n\t"
  "client_id\030\001 \001(\t\022\025\n\rclient_secret\030\002 \001(\t\022\013"
  "\n\003uid\030\003 \001(\005\022\013\n\003gid\030\004 \001(\005\"c\n\014AuthResponse"
  "\022\033\n\006status\030\001 \001(\0162\013.RPC.Status\022\r\n\005token\030\002"
  " \001(\t\022\017\n\007message\030\003 \001(\t\022\026\n\016session_expiry\030"
  "\004 \001(\003*k\n\006Status\022\006\n\002OK\020\000\022\t\n\005ERROR\020\001\022\024\n\020IN"
  "VALID_ARGUMENT\020\002\022\r\n\tNOT_FOUND\020\003\022\025\n\021PERMI"
  "SSION_DENIED\020\004\022\022\n\016INTERNAL_ERROR\020\0052n\n\nRP"
  "CService\0223\n\014Authenticate\022\020.RPC.AuthReque"
  "st\032\021.RPC.AuthResponse\022+\n\014CallFunction\022\014."
  "RPC.Request\032\r.RPC.Responseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_procedure_5fformat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_procedure_5fformat_2eproto = {
    false, false, 1114, descriptor_table_protodef_procedure_5fformat_2eproto,
    "procedure_format.proto",
    &descriptor_table_procedure_5fformat_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_procedure_5fformat_2eproto::offsets,
    file_level_metadata_procedure_5fformat_2eproto, file_level_enum_descriptors_procedure_5fformat_2eproto,
    file_level_service_descriptors_procedure_5fformat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_procedure_5fformat_2eproto_getter() {
  return &descriptor_table_procedure_5fformat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_procedure_5fformat_2eproto(&descriptor_table_procedure_5fformat_2eproto);
namespace RPC {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_procedure_5fformat_2eproto);
  return file_level_enum_descriptors_procedure_5fformat_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Argument::_Internal {
 public:
};

Argument::Argument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RPC.Argument)
}
Argument::Argument(const Argument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Argument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kIntVal: {
      _this->_internal_set_int_val(from._internal_int_val());
      break;
    }
    case kDoubleVal: {
      _this->_internal_set_double_val(from._internal_double_val());
      break;
    }
    case kStringVal: {
      _this->_internal_set_string_val(from._internal_string_val());
      break;
    }
    case kBinaryVal: {
      _this->_internal_set_binary_val(from._internal_binary_val());
      break;
    }
    case kBoolVal: {
      _this->_internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RPC.Argument)
}

inline void Argument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

Argument::~Argument() {
  // @@protoc_insertion_point(destructor:RPC.Argument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Argument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void Argument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Argument::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:RPC.Argument)
  switch (value_case()) {
    case kIntVal: {
      // No need to clear
      break;
    }
    case kDoubleVal: {
      // No need to clear
      break;
    }
    case kStringVal: {
      _impl_.value_.string_val_.Destroy();
      break;
    }
    case kBinaryVal: {
      _impl_.value_.binary_val_.Destroy();
      break;
    }
    case kBoolVal: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Argument::Clear() {
// @@protoc_insertion_point(message_clear_start:RPC.Argument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Argument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.Argument.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 int_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_int_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _internal_set_double_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string string_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.Argument.string_val"));
        } else
          goto handle_unusual;
        continue;
      // bytes binary_val = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_binary_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_val = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_bool_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Argument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPC.Argument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.Argument.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 int_val = 2;
  if (_internal_has_int_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_int_val(), target);
  }

  // double double_val = 3;
  if (_internal_has_double_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_val(), target);
  }

  // string string_val = 4;
  if (_internal_has_string_val()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_val().data(), static_cast<int>(this->_internal_string_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.Argument.string_val");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_val(), target);
  }

  // bytes binary_val = 5;
  if (_internal_has_binary_val()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_binary_val(), target);
  }

  // bool bool_val = 6;
  if (_internal_has_bool_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_bool_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPC.Argument)
  return target;
}

size_t Argument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPC.Argument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (value_case()) {
    // int32 int_val = 2;
    case kIntVal: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_val());
      break;
    }
    // double double_val = 3;
    case kDoubleVal: {
      total_size += 1 + 8;
      break;
    }
    // string string_val = 4;
    case kStringVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_val());
      break;
    }
    // bytes binary_val = 5;
    case kBinaryVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary_val());
      break;
    }
    // bool bool_val = 6;
    case kBoolVal: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Argument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Argument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Argument::GetClassData() const { return &_class_data_; }


void Argument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Argument*>(&to_msg);
  auto& from = static_cast<const Argument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPC.Argument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.value_case()) {
    case kIntVal: {
      _this->_internal_set_int_val(from._internal_int_val());
      break;
    }
    case kDoubleVal: {
      _this->_internal_set_double_val(from._internal_double_val());
      break;
    }
    case kStringVal: {
      _this->_internal_set_string_val(from._internal_string_val());
      break;
    }
    case kBinaryVal: {
      _this->_internal_set_binary_val(from._internal_binary_val());
      break;
    }
    case kBoolVal: {
      _this->_internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Argument::CopyFrom(const Argument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPC.Argument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {
  return true;
}

void Argument::InternalSwap(Argument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Argument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_procedure_5fformat_2eproto_getter, &descriptor_table_procedure_5fformat_2eproto_once,
      file_level_metadata_procedure_5fformat_2eproto[0]);
}

// ===================================================================

class ReturnValue::_Internal {
 public:
};

ReturnValue::ReturnValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RPC.ReturnValue)
}
ReturnValue::ReturnValue(const ReturnValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReturnValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  clear_has_result();
  switch (from.result_case()) {
    case kIntResult: {
      _this->_internal_set_int_result(from._internal_int_result());
      break;
    }
    case kDoubleResult: {
      _this->_internal_set_double_result(from._internal_double_result());
      break;
    }
    case kStringResult: {
      _this->_internal_set_string_result(from._internal_string_result());
      break;
    }
    case kBinaryResult: {
      _this->_internal_set_binary_result(from._internal_binary_result());
      break;
    }
    case kBoolResult: {
      _this->_internal_set_bool_result(from._internal_bool_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RPC.ReturnValue)
}

inline void ReturnValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_result();
}

ReturnValue::~ReturnValue() {
  // @@protoc_insertion_point(destructor:RPC.ReturnValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReturnValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (has_result()) {
    clear_result();
  }
}

void ReturnValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReturnValue::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:RPC.ReturnValue)
  switch (result_case()) {
    case kIntResult: {
      // No need to clear
      break;
    }
    case kDoubleResult: {
      // No need to clear
      break;
    }
    case kStringResult: {
      _impl_.result_.string_result_.Destroy();
      break;
    }
    case kBinaryResult: {
      _impl_.result_.binary_result_.Destroy();
      break;
    }
    case kBoolResult: {
      // No need to clear
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}


void ReturnValue::Clear() {
// @@protoc_insertion_point(message_clear_start:RPC.ReturnValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.status_ = 0;
  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReturnValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .RPC.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::RPC::Status>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.ReturnValue.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 int_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_int_result(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _internal_set_double_result(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string string_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_string_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.ReturnValue.string_result"));
        } else
          goto handle_unusual;
        continue;
      // bytes binary_result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_binary_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_bool_result(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReturnValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPC.ReturnValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .RPC.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.ReturnValue.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int32 int_result = 3;
  if (_internal_has_int_result()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_int_result(), target);
  }

  // double double_result = 4;
  if (_internal_has_double_result()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_result(), target);
  }

  // string string_result = 5;
  if (_internal_has_string_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_result().data(), static_cast<int>(this->_internal_string_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.ReturnValue.string_result");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string_result(), target);
  }

  // bytes binary_result = 6;
  if (_internal_has_binary_result()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_binary_result(), target);
  }

  // bool bool_result = 7;
  if (_internal_has_bool_result()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_bool_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPC.ReturnValue)
  return target;
}

size_t ReturnValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPC.ReturnValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .RPC.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (result_case()) {
    // int32 int_result = 3;
    case kIntResult: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_result());
      break;
    }
    // double double_result = 4;
    case kDoubleResult: {
      total_size += 1 + 8;
      break;
    }
    // string string_result = 5;
    case kStringResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_result());
      break;
    }
    // bytes binary_result = 6;
    case kBinaryResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary_result());
      break;
    }
    // bool bool_result = 7;
    case kBoolResult: {
      total_size += 1 + 1;
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReturnValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReturnValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReturnValue::GetClassData() const { return &_class_data_; }


void ReturnValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReturnValue*>(&to_msg);
  auto& from = static_cast<const ReturnValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPC.ReturnValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  switch (from.result_case()) {
    case kIntResult: {
      _this->_internal_set_int_result(from._internal_int_result());
      break;
    }
    case kDoubleResult: {
      _this->_internal_set_double_result(from._internal_double_result());
      break;
    }
    case kStringResult: {
      _this->_internal_set_string_result(from._internal_string_result());
      break;
    }
    case kBinaryResult: {
      _this->_internal_set_binary_result(from._internal_binary_result());
      break;
    }
    case kBoolResult: {
      _this->_internal_set_bool_result(from._internal_bool_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReturnValue::CopyFrom(const ReturnValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPC.ReturnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnValue::IsInitialized() const {
  return true;
}

void ReturnValue::InternalSwap(ReturnValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
  swap(_impl_.result_, other->_impl_.result_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReturnValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_procedure_5fformat_2eproto_getter, &descriptor_table_procedure_5fformat_2eproto_once,
      file_level_metadata_procedure_5fformat_2eproto[1]);
}

// ===================================================================

class Request::_Internal {
 public:
  static const ::RPC::AuthRequest& auth_request(const Request* msg);
  static const ::RPC::FunctionRequest& function_request(const Request* msg);
};

const ::RPC::AuthRequest&
Request::_Internal::auth_request(const Request* msg) {
  return *msg->_impl_.request_type_.auth_request_;
}
const ::RPC::FunctionRequest&
Request::_Internal::function_request(const Request* msg) {
  return *msg->_impl_.request_type_.function_request_;
}
void Request::set_allocated_auth_request(::RPC::AuthRequest* auth_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (auth_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(auth_request);
    if (message_arena != submessage_arena) {
      auth_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_request, submessage_arena);
    }
    set_has_auth_request();
    _impl_.request_type_.auth_request_ = auth_request;
  }
  // @@protoc_insertion_point(field_set_allocated:RPC.Request.auth_request)
}
void Request::set_allocated_function_request(::RPC::FunctionRequest* function_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (function_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(function_request);
    if (message_arena != submessage_arena) {
      function_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_request, submessage_arena);
    }
    set_has_function_request();
    _impl_.request_type_.function_request_ = function_request;
  }
  // @@protoc_insertion_point(field_set_allocated:RPC.Request.function_request)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RPC.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request_type();
  switch (from.request_type_case()) {
    case kAuthRequest: {
      _this->_internal_mutable_auth_request()->::RPC::AuthRequest::MergeFrom(
          from._internal_auth_request());
      break;
    }
    case kFunctionRequest: {
      _this->_internal_mutable_function_request()->::RPC::FunctionRequest::MergeFrom(
          from._internal_function_request());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RPC.Request)
}

inline void Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_request_type();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:RPC.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request_type()) {
    clear_request_type();
  }
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::clear_request_type() {
// @@protoc_insertion_point(one_of_clear_start:RPC.Request)
  switch (request_type_case()) {
    case kAuthRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_type_.auth_request_;
      }
      break;
    }
    case kFunctionRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_type_.function_request_;
      }
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:RPC.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .RPC.AuthRequest auth_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RPC.FunctionRequest function_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPC.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .RPC.AuthRequest auth_request = 1;
  if (_internal_has_auth_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::auth_request(this),
        _Internal::auth_request(this).GetCachedSize(), target, stream);
  }

  // .RPC.FunctionRequest function_request = 2;
  if (_internal_has_function_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::function_request(this),
        _Internal::function_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPC.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPC.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_type_case()) {
    // .RPC.AuthRequest auth_request = 1;
    case kAuthRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_type_.auth_request_);
      break;
    }
    // .RPC.FunctionRequest function_request = 2;
    case kFunctionRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_type_.function_request_);
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPC.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_type_case()) {
    case kAuthRequest: {
      _this->_internal_mutable_auth_request()->::RPC::AuthRequest::MergeFrom(
          from._internal_auth_request());
      break;
    }
    case kFunctionRequest: {
      _this->_internal_mutable_function_request()->::RPC::FunctionRequest::MergeFrom(
          from._internal_function_request());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPC.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_type_, other->_impl_.request_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_procedure_5fformat_2eproto_getter, &descriptor_table_procedure_5fformat_2eproto_once,
      file_level_metadata_procedure_5fformat_2eproto[2]);
}

// ===================================================================

class FunctionRequest::_Internal {
 public:
};

FunctionRequest::FunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RPC.FunctionRequest)
}
FunctionRequest::FunctionRequest(const FunctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.function_name_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.client_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_function_name().empty()) {
    _this->_impl_.function_name_.Set(from._internal_function_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.client_id_ = from._impl_.client_id_;
  // @@protoc_insertion_point(copy_constructor:RPC.FunctionRequest)
}

inline void FunctionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){arena}
    , decltype(_impl_.function_name_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.client_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FunctionRequest::~FunctionRequest() {
  // @@protoc_insertion_point(destructor:RPC.FunctionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
  _impl_.function_name_.Destroy();
  _impl_.token_.Destroy();
}

void FunctionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RPC.FunctionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  _impl_.function_name_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _impl_.client_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.FunctionRequest.function_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .RPC.Argument args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.FunctionRequest.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPC.FunctionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string function_name = 1;
  if (!this->_internal_function_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.FunctionRequest.function_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function_name(), target);
  }

  // repeated .RPC.Argument args = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 client_id = 3;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_id(), target);
  }

  // string token = 4;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.FunctionRequest.token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPC.FunctionRequest)
  return target;
}

size_t FunctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPC.FunctionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RPC.Argument args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->_impl_.args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string function_name = 1;
  if (!this->_internal_function_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }

  // string token = 4;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int32 client_id = 3;
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRequest::GetClassData() const { return &_class_data_; }


void FunctionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionRequest*>(&to_msg);
  auto& from = static_cast<const FunctionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPC.FunctionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  if (!from._internal_function_name().empty()) {
    _this->_internal_set_function_name(from._internal_function_name());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRequest::CopyFrom(const FunctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPC.FunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRequest::IsInitialized() const {
  return true;
}

void FunctionRequest::InternalSwap(FunctionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.function_name_, lhs_arena,
      &other->_impl_.function_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.client_id_, other->_impl_.client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_procedure_5fformat_2eproto_getter, &descriptor_table_procedure_5fformat_2eproto_once,
      file_level_metadata_procedure_5fformat_2eproto[3]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::RPC::ReturnValue& return_value(const Response* msg);
  static const ::RPC::AuthResponse& auth_response(const Response* msg);
};

const ::RPC::ReturnValue&
Response::_Internal::return_value(const Response* msg) {
  return *msg->_impl_.response_type_.return_value_;
}
const ::RPC::AuthResponse&
Response::_Internal::auth_response(const Response* msg) {
  return *msg->_impl_.response_type_.auth_response_;
}
void Response::set_allocated_return_value(::RPC::ReturnValue* return_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (return_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(return_value);
    if (message_arena != submessage_arena) {
      return_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, return_value, submessage_arena);
    }
    set_has_return_value();
    _impl_.response_type_.return_value_ = return_value;
  }
  // @@protoc_insertion_point(field_set_allocated:RPC.Response.return_value)
}
void Response::set_allocated_auth_response(::RPC::AuthResponse* auth_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (auth_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(auth_response);
    if (message_arena != submessage_arena) {
      auth_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_response, submessage_arena);
    }
    set_has_auth_response();
    _impl_.response_type_.auth_response_ = auth_response;
  }
  // @@protoc_insertion_point(field_set_allocated:RPC.Response.auth_response)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RPC.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response_type();
  switch (from.response_type_case()) {
    case kReturnValue: {
      _this->_internal_mutable_return_value()->::RPC::ReturnValue::MergeFrom(
          from._internal_return_value());
      break;
    }
    case kAuthResponse: {
      _this->_internal_mutable_auth_response()->::RPC::AuthResponse::MergeFrom(
          from._internal_auth_response());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RPC.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response_type();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:RPC.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response_type()) {
    clear_response_type();
  }
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::clear_response_type() {
// @@protoc_insertion_point(one_of_clear_start:RPC.Response)
  switch (response_type_case()) {
    case kReturnValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_type_.return_value_;
      }
      break;
    }
    case kAuthResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_type_.auth_response_;
      }
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:RPC.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .RPC.ReturnValue return_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_return_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RPC.AuthResponse auth_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPC.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .RPC.ReturnValue return_value = 1;
  if (_internal_has_return_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::return_value(this),
        _Internal::return_value(this).GetCachedSize(), target, stream);
  }

  // .RPC.AuthResponse auth_response = 2;
  if (_internal_has_auth_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::auth_response(this),
        _Internal::auth_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPC.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPC.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_type_case()) {
    // .RPC.ReturnValue return_value = 1;
    case kReturnValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_type_.return_value_);
      break;
    }
    // .RPC.AuthResponse auth_response = 2;
    case kAuthResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_type_.auth_response_);
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPC.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_type_case()) {
    case kReturnValue: {
      _this->_internal_mutable_return_value()->::RPC::ReturnValue::MergeFrom(
          from._internal_return_value());
      break;
    }
    case kAuthResponse: {
      _this->_internal_mutable_auth_response()->::RPC::AuthResponse::MergeFrom(
          from._internal_auth_response());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPC.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_type_, other->_impl_.response_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_procedure_5fformat_2eproto_getter, &descriptor_table_procedure_5fformat_2eproto_once,
      file_level_metadata_procedure_5fformat_2eproto[4]);
}

// ===================================================================

class AuthRequest::_Internal {
 public:
};

AuthRequest::AuthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RPC.AuthRequest)
}
AuthRequest::AuthRequest(const AuthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){}
    , decltype(_impl_.client_secret_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.gid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_secret().empty()) {
    _this->_impl_.client_secret_.Set(from._internal_client_secret(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gid_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.gid_));
  // @@protoc_insertion_point(copy_constructor:RPC.AuthRequest)
}

inline void AuthRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){}
    , decltype(_impl_.client_secret_){}
    , decltype(_impl_.uid_){0}
    , decltype(_impl_.gid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthRequest::~AuthRequest() {
  // @@protoc_insertion_point(destructor:RPC.AuthRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id_.Destroy();
  _impl_.client_secret_.Destroy();
}

void AuthRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RPC.AuthRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_.ClearToEmpty();
  _impl_.client_secret_.ClearToEmpty();
  ::memset(&_impl_.uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gid_) -
      reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.gid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.AuthRequest.client_id"));
        } else
          goto handle_unusual;
        continue;
      // string client_secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.AuthRequest.client_secret"));
        } else
          goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPC.AuthRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.AuthRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string client_secret = 2;
  if (!this->_internal_client_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_secret().data(), static_cast<int>(this->_internal_client_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.AuthRequest.client_secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_secret(), target);
  }

  // int32 uid = 3;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  // int32 gid = 4;
  if (this->_internal_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPC.AuthRequest)
  return target;
}

size_t AuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPC.AuthRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string client_secret = 2;
  if (!this->_internal_client_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_secret());
  }

  // int32 uid = 3;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  // int32 gid = 4;
  if (this->_internal_gid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRequest::GetClassData() const { return &_class_data_; }


void AuthRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthRequest*>(&to_msg);
  auto& from = static_cast<const AuthRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPC.AuthRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_client_secret().empty()) {
    _this->_internal_set_client_secret(from._internal_client_secret());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_gid() != 0) {
    _this->_internal_set_gid(from._internal_gid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRequest::CopyFrom(const AuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPC.AuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRequest::IsInitialized() const {
  return true;
}

void AuthRequest::InternalSwap(AuthRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id_, lhs_arena,
      &other->_impl_.client_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_secret_, lhs_arena,
      &other->_impl_.client_secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthRequest, _impl_.gid_)
      + sizeof(AuthRequest::_impl_.gid_)
      - PROTOBUF_FIELD_OFFSET(AuthRequest, _impl_.uid_)>(
          reinterpret_cast<char*>(&_impl_.uid_),
          reinterpret_cast<char*>(&other->_impl_.uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_procedure_5fformat_2eproto_getter, &descriptor_table_procedure_5fformat_2eproto_once,
      file_level_metadata_procedure_5fformat_2eproto[5]);
}

// ===================================================================

class AuthResponse::_Internal {
 public:
};

AuthResponse::AuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RPC.AuthResponse)
}
AuthResponse::AuthResponse(const AuthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.session_expiry_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.session_expiry_, &from._impl_.session_expiry_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.session_expiry_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:RPC.AuthResponse)
}

inline void AuthResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.session_expiry_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:RPC.AuthResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.message_.Destroy();
}

void AuthResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RPC.AuthResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.session_expiry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.session_expiry_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .RPC.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::RPC::Status>(val));
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.AuthResponse.token"));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPC.AuthResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // int64 session_expiry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.session_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPC.AuthResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .RPC.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.AuthResponse.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPC.AuthResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // int64 session_expiry = 4;
  if (this->_internal_session_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_session_expiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPC.AuthResponse)
  return target;
}

size_t AuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPC.AuthResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 session_expiry = 4;
  if (this->_internal_session_expiry() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_session_expiry());
  }

  // .RPC.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthResponse::GetClassData() const { return &_class_data_; }


void AuthResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthResponse*>(&to_msg);
  auto& from = static_cast<const AuthResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPC.AuthResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_session_expiry() != 0) {
    _this->_internal_set_session_expiry(from._internal_session_expiry());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPC.AuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  return true;
}

void AuthResponse::InternalSwap(AuthResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthResponse, _impl_.status_)
      + sizeof(AuthResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(AuthResponse, _impl_.session_expiry_)>(
          reinterpret_cast<char*>(&_impl_.session_expiry_),
          reinterpret_cast<char*>(&other->_impl_.session_expiry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_procedure_5fformat_2eproto_getter, &descriptor_table_procedure_5fformat_2eproto_once,
      file_level_metadata_procedure_5fformat_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace RPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RPC::Argument*
Arena::CreateMaybeMessage< ::RPC::Argument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPC::Argument >(arena);
}
template<> PROTOBUF_NOINLINE ::RPC::ReturnValue*
Arena::CreateMaybeMessage< ::RPC::ReturnValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPC::ReturnValue >(arena);
}
template<> PROTOBUF_NOINLINE ::RPC::Request*
Arena::CreateMaybeMessage< ::RPC::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPC::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::RPC::FunctionRequest*
Arena::CreateMaybeMessage< ::RPC::FunctionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPC::FunctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RPC::Response*
Arena::CreateMaybeMessage< ::RPC::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPC::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::RPC::AuthRequest*
Arena::CreateMaybeMessage< ::RPC::AuthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPC::AuthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RPC::AuthResponse*
Arena::CreateMaybeMessage< ::RPC::AuthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPC::AuthResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
